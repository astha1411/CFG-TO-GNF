import java.util.*;

public class test1 {
    static Map<String,List<String>> produrules;
    static List<String>[] gnf;
    static Map<String,String> newVariable;
    static int variables;

    test1(){
        gnf = new ArrayList[50];
        newVariable = new HashMap<>();
        produrules = new HashMap<>();

        input();
    }

    //A->A+B|B
    //B->BS|S
    //S->(A)|a|b|c
    public static void input(){

        Scanner s = new Scanner(System.in);
        System.out.println("Enter number of production rules");
        int n = s.nextInt();
        for(int i=1; i<=n; i++){

            System.out.println("Production Rule: "+i);
            String production = s.next();

              String[] parts = production.split("->", 2);


            String[] rules = parts[1].split("\\|",5);
            System.out.println("Production Rule: "+parts[0]);
            for (String a : rules)
                System.out.println(a);
            produrules.put(parts[0],new ArrayList<>(Arrays.asList(rules)));
        }

    }
   public static void replaceVariables(){
       int i=1;
       for (Map.Entry mapElement : produrules.entrySet()) {
           String key = (String) mapElement.getKey();

           if (!newVariable.containsKey(key)) {
               newVariable.put(key, Integer.toString(i));
               gnf[i] = new ArrayList<>();
               i++;

           }

           List<String> ls = (List<String>) mapElement.getValue();
           System.out.println(key + " : " + ls);

           for (int j = 0; j < ls.size(); j++) {

               String s = ls.get(j);
               String val = "";
               for (int l = 0; l < s.length(); l++) {

                   if (Character.isUpperCase(s.charAt(l))) {
                       if (!newVariable.containsKey(String.valueOf(s.charAt(l)))) {
                           newVariable.put(String.valueOf(s.charAt(l)), Integer.toString(i));
                           gnf[i] = new ArrayList<>();
                           i++;
                       }
                       val = val + newVariable.get(String.valueOf(s.charAt(l)));
                       continue;
                   }
                   val = val+String.valueOf(s.charAt(l));

               }
               gnf[Integer.parseInt(newVariable.get(key))].add(val);
           }
       }
       for (Map.Entry mapElement : newVariable.entrySet()) {
           String key = (String)mapElement.getKey();
           String value = (String)mapElement.getValue();


           System.out.println(key + " : " + value);
       }
           variables =i;
       }

       public static void removeTerminal(){
        HashMap<Character,Character> seen = new HashMap<>();

        int len = variables;
        for(int i=1; i<len; i++){

            for(int j=0; j<gnf[i].size();j++){

                String s = gnf[i].get(j);
                if(s.length()>1){

            for(int l=0; l<s.length(); l++) {

                if(!Character.isDigit(s.charAt(l))){

                    if(seen.containsKey(s.charAt(l))){  //aaB

                        char value = seen.get(s.charAt(l));
                        s = s.replace(s.charAt(l),value);



                    }
                    else{
                    int index = variables;

                    gnf[index] = new ArrayList<>(Arrays.asList(String.valueOf(s.charAt(l))));
                            s = s.replace(s.charAt(l),(char)(index+'0'));

                      variables++;}
                            gnf[i].set(j,s);

                }

            }}
            }
        }
       }

       public static void _2NonTerminals(){

           int len = variables;
           for(int i=1; i<len; i++){

               for(int j=0; j<gnf[i].size();j++){

                   String s = gnf[i].get(j);
                   while(s.length()>2){


                           String newString = s.substring(s.length()-2);
                           int index = variables;
                           s = s.substring(0,s.length()-2)+String.valueOf(index);

                           gnf[index] = new ArrayList<>(Arrays.asList(newString));
                           gnf[i].set(j,s);
                       variables++;
                       }
                   }
               }

           for(int i=variables-1; i>0;i--){

               for(int j=0; j<gnf[i].size();j++){

                   String s = gnf[i].get(j);
                   if(s.length()==1 && Character.isDigit(s.charAt(0)) ){

                               gnf[i].remove(j);
                       gnf[i].addAll(gnf[Integer.parseInt(s)]);



                   }
               }




           }
           }




    public static void gnfprint(){
        System.out.println("***********");

        for(int i=1; i<variables; i++){

            System.out.println("A"+i+" -> "+gnf[i]);
        }
    }
    public static void main(String[] args){

        test1 obj = new test1();

        obj.replaceVariables();
        obj.gnfprint();
        obj.removeTerminal();
        obj.gnfprint();
        obj._2NonTerminals();
        obj.gnfprint();



    }


}
